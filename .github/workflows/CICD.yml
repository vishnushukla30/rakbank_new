name: rakbank

on: [push, workflow_dispatch,pull_request]

jobs:
  checkout:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 18
      uses: actions/setup-java@v2
      with:
        java-version: 18
        distribution: 'adopt'

    - name: Build Maven
      run: mvn -B package
    - name: Upload to artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.repository.name }}-artifact
        path: |
          ./target/*.jar

    - name: Upload JAR file
      uses: actions/upload-artifact@v2
      with:
        name: app-jar
        path: target/*.jar
  SAST: 
    runs-on: ubuntu-latest
    name: Run the SAST scan on the source code 
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven cloud
      run:  mvn -B verify sonar:sonar -Dsonar.projectKey=vishnushukla30_rakbank_springboot -Dsonar.organization=vishnushukla30 -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Build and test with Maven
      run: mvn --batch-mode --update-snapshots --no-transfer-progress clean package

    - name: Upload JAR file
      uses: actions/upload-artifact@v2
      with:
        name: app-jar
        path: target/*.jar
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v2

      # - name: Set up JDK 17
      #   uses: actions/setup-java@v2
      #   with:
      #     java-version: 17
      #     distribution: 'adopt'

      - name: Download JAR file
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: target

      - name: Build Docker image
        run: docker build -t 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot .

      - name: Install and configure AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region me-central-1

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region me-central-1 | docker login --username AWS --password-stdin 590733205684.dkr.ecr.me-central-1.amazonaws.com

      - name: Tag and push Docker image
        run: |
          docker tag 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:latest 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:${GITHUB_SHA}
          docker push 590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:${GITHUB_SHA}

      - name: Deploy to EKS
        run: |
          aws eks update-kubeconfig --region me-central-1 --name rakbank
          mkdir -p k8s
          export ECR_REPOSITORY_URL="590733205684.dkr.ecr.me-central-1.amazonaws.com/springboot:${GITHUB_SHA}"
          envsubst < k8s-deployment.yaml > k8s/k8s-deployment.yaml
          echo "resources:" > k8s/kustomization.yaml
          echo "- k8s-deployment.yaml" >> k8s/kustomization.yaml
          kubectl kustomize k8s | kubectl apply -f - --force
